language ESSENCE' 1.0

given NUM_GROUPS : int(1..)
given NUM_TEACHERS : int(1..)

$ Minimum and Maximum hours of teaching for a teacher. The Availability matrix will read in the actual values
$ for each teacher

letting MINHRS    be 18
letting MAXHRS    be 26

$ A group's study hours per week
letting WKHRS     be 16

letting GROUP   be domain int(1..NUM_GROUPS)
letting TEACHER be domain int(1..NUM_TEACHERS)
letting SLOT    be domain int(1..40)

given Demand        : matrix indexed by [GROUP,SLOT] of int(0..1)
given Availability  : matrix indexed by [TEACHER,int(0..1)] of int(MINHRS..MAXHRS)

find  Roster        : matrix indexed by [GROUP,SLOT] of int(0,TEACHER)

such that

$ Read in the initial data
forAll g : GROUP .
    forAll s : SLOT .
        (Demand[g,s] = 0) -> (Roster[g,s] = 0),

$ All the assigned teachers for a slot must be different
forAll s : SLOT .
    alldifferent_except(Roster[..,s],0),

$ Every teacher must be assigned at least his MINHRS
atleast(flatten(Roster), [ Availability[t,0] | t : TEACHER], [ t | t : TEACHER ]),

$ Every teacher must not be assigned more than his MAXHRS
atmost(flatten(Roster), [ Availability[t,1] | t : TEACHER], [ t | t : TEACHER ]),

$ All groups must have WKHRS hrs of study per week
forAll g : GROUP .
    sum([ Roster[g,s] > 0 | s : SLOT]) = WKHRS


